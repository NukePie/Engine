//GLOBALS
Texture2D shaderTexture[3] : register(t1);
Texture2D depthMapTexture : register(t0);

SamplerState SampleTypeClamp : register(s0);
SamplerState SampleTypeWrap  : register(s1);

SamplerState SampleTypeLinearClamp
{
	Filter = MIN_MAG_MIP_ANISOTROPIC;
	AddressU = Clamp;
	AddressV = Clamp;
};

static const float SMAP_SIZE = 2048.0f;
static const float SMAP_DX = 1.0f / SMAP_SIZE;

cbuffer LightBuffer
{
	float4 ambientColor;
	float4 diffuseColor;
	float4 specularColor;
	//float specularPower;
	float3 lightDirection;
};

//TYPEDEFS
struct PixelInputType
{
	float4 position : SV_POSITION;
	float2 tex : TEXCOORD0;
	float3 normal : NORMAL;
	float4 lightViewPosition : TEXCOORD1;
	float3 lightPos : TEXCOORD2;
	float4 wPos : TEXCOORD3;
	float3 tangent : TANGENT;
    float3 binormal : BINORMAL;
	float3 viewDirection : TEXCOORD4;
};

// This method is used to do a 2x2 PCF calculation.
float PCF2x2(float2 projTexCoords, float lightDepthValue, float2 offset)
{
	float result = 0.0f;
	float2 offsetPtc;

	// Offset the projected texture coordinates with the offset value
	offsetPtc = projTexCoords + SMAP_DX * offset;

	// Sample shadow map to get the nearest depth to light.
	float ss0 = depthMapTexture.Sample(SampleTypeLinearClamp, offsetPtc.xy).r; // center
	float ss1 = depthMapTexture.Sample(SampleTypeLinearClamp, offsetPtc.xy + float2(SMAP_DX, 0)).r; // right
	float ss2 = depthMapTexture.Sample(SampleTypeLinearClamp, offsetPtc.xy + float2(0, SMAP_DX)).r; // down
	float ss3 = depthMapTexture.Sample(SampleTypeLinearClamp, offsetPtc.xy + float2(SMAP_DX, SMAP_DX)).r; // down-right
	
	// Check what samples are in shadow.
	float result0 = lightDepthValue <= ss0;
	float result1 = lightDepthValue <= ss1;
	float result2 = lightDepthValue <= ss2;
	float result3 = lightDepthValue <= ss3;

	// Add together the resulting values and divide by amount of values so it adds up to 1.
	result = (result0 + result1 + result2 + result3) / 4;

	return result;
}

//PIXEL SHADER
float4 ShadowPixelShader(PixelInputType input): SV_TARGET
{
	float bias;
	float4 color;
	float2 projectTexCoord;
	float depthValue;
	float lightDepthValue;
	float lightIntensity;
	float4 textureColor;
	float4 bumpMap;
	float3 bumpNormal;
	float3 lightVec;
	float3 lightDir;
	float4 specular;
	float4 specularIntensity;
	float3 reflection;

	// Shadow mapping requires a bias adjustment when comparing the depth of the light and the depth of the object due to the low floating point precision of the depth map.
    // Set the bias value for fixing the floating point precision issues.
	bias = 0.000001f;

	color = ambientColor;


	// Calculate the projected texture coordinates for sampling the shadow map (depth buffer texture) based on the light's viewing position. 
	projectTexCoord.x =  input.lightViewPosition.x / input.lightViewPosition.w / 2.0f + 0.5f;
	projectTexCoord.y = -input.lightViewPosition.y / input.lightViewPosition.w / 2.0f + 0.5f;
	
	// Determine if the projected coordinates are in the 0 to 1 range.  If so then this pixel is in the view of the light.
	if((saturate(projectTexCoord.x) == projectTexCoord.x) && (saturate(projectTexCoord.y) == projectTexCoord.y))
	{
		// Sample the shadow map depth value from the texture using the sampler at the projected coordinate location.
		depthValue = depthMapTexture.Sample(SampleTypeLinearClamp, projectTexCoord).r;
		lightDepthValue = input.lightViewPosition.z / input.lightViewPosition.w;

		lightDepthValue = lightDepthValue - bias;

		/////////////////////////////////////////
		// BEGIN PCF
		//-------------------------
		// Based on page 678 - 680 in 3D Game Programming With Direct X 11
		//

		float sum = 0;
		float shadowCoeff = 0;

		// Sample the shadow map in 4 places (each with a 2x2 grid) to determine how much in shadow each sample is.
		float result0 = PCF2x2(projectTexCoord, lightDepthValue, float2 (-1.0f, -1.0f) ); // Up left
		float result1 = PCF2x2(projectTexCoord, lightDepthValue, float2 (1.0f, -1.0f) ); // Up right
		float result2 = PCF2x2(projectTexCoord, lightDepthValue, float2 (-1.0f, 1.0f) ); // Down left
		float result3 = PCF2x2(projectTexCoord, lightDepthValue, float2 (1.0f, 1.0f) ); // Down right

		// Summarize all the sample results.
		sum = result0 + result1 + result2 + result3;

		// Divide the sum by the amount of samples to get the final effect.
		shadowCoeff = sum / 4;

		// END PCF
		/////////////////////////////////////////


		// The final PCF value is used when determining if lighting calculations should be done
		if(shadowCoeff > 0)
		{
			bumpMap = shaderTexture[1].Sample(SampleTypeWrap, input.tex);
			bumpMap = (bumpMap * 2.0f) - 1.0f;

			bumpNormal = input.normal + bumpMap.x * input.tangent + bumpMap.y * input.binormal;

			bumpNormal = normalize(bumpNormal);

			// The value from the PCF calculations is used to determine how lit up the pixel should be
			lightIntensity = saturate(dot(bumpNormal, normalize(input.lightPos - input.wPos)) * shadowCoeff);

			if(lightIntensity > 0.0f)
			{
				color += (diffuseColor * lightIntensity);
				color = saturate(color);
			}
		}
	}

	//the light intensity value is calculated as the dot product between the normal vector of triangle and the light direction vector.
	//calculate the amount of light on this pixel

	textureColor = shaderTexture[0].Sample(SampleTypeWrap, input.tex);

	color = color * textureColor;

	//invert the light direction for light calc
	lightDir = -lightDirection;
	if(lightIntensity > 0.0f)
	{
		// Sample the specular map
		specularIntensity = shaderTexture[2].Sample(SampleTypeWrap, input.tex);

		// Calculate the reflection vector based on the light intensity, normal vector and light dir.
		reflection = normalize(2 * lightIntensity * bumpNormal - lightDir);

		// Determine the amount of specular light based on the reflection vector, view dir and specPower
		specular = pow(saturate(dot(reflection, input.viewDirection)), 1.0f);

		//multiply the specular light at the pixel with the specular intensity from the specular map
		specular = specular * specularIntensity;

		//Add the specular component the the output
		color = saturate(color + specular);
	}

	return color;
}
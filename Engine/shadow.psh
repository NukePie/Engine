//GLOBALS
Texture2D shaderTexture[2] : register(t1);
Texture2D depthMapTexture : register(t0);

SamplerState SampleTypeClamp : register(s0);
SamplerState SampleTypeWrap  : register(s1);

SamplerState SampleTypeLinearClamp
{
	Filter = MIN_MAG_MIP_ANISOTROPIC;
	AddressU = Clamp;
	AddressV = Clamp;
};

static const float SMAP_SIZE = 2048.0f;
static const float SMAP_DX = 1.0f / SMAP_SIZE;

cbuffer LightBuffer
{
	float4 ambientColor;
	float4 diffuseColor;
};

//TYPEDEFS
struct PixelInputType
{
	float4 position : SV_POSITION;
	float2 tex : TEXCOORD0;
	float3 normal : NORMAL;
	float4 lightViewPosition : TEXCOORD1;
	float3 lightPos : TEXCOORD2;
	float4 wPos : TEXCOORD3;
	float3 tangent : TANGENT;
    float3 binormal : BINORMAL;
};



//PIXEL SHADER
float4 ShadowPixelShader(PixelInputType input): SV_TARGET
{
	float bias;
	float4 color;
	float2 projectTexCoord;
	float depthValue;
	float lightDepthValue;
	float lightIntensity;
	float4 textureColor;
	float4 bumpMap;
	float3 bumpNormal;
	float3 lightVec;

	// Shadow mapping requires a bias adjustment when comparing the depth of the light and the depth of the object due to the low floating point precision of the depth map.
    // Set the bias value for fixing the floating point precision issues.
	bias = 0.000001f;

	color = ambientColor;


	// Calculate the projected texture coordinates for sampling the shadow map (depth buffer texture) based on the light's viewing position. 
	projectTexCoord.x =  input.lightViewPosition.x / input.lightViewPosition.w / 2.0f + 0.5f;
	projectTexCoord.y = -input.lightViewPosition.y / input.lightViewPosition.w / 2.0f + 0.5f;
	
	// Determine if the projected coordinates are in the 0 to 1 range.  If so then this pixel is in the view of the light.
	if((saturate(projectTexCoord.x) == projectTexCoord.x) && (saturate(projectTexCoord.y) == projectTexCoord.y))
	{
		// Sample the shadow map depth value from the texture using the sampler at the projected coordinate location.
		depthValue = depthMapTexture.Sample(SampleTypeLinearClamp, projectTexCoord).r;
		lightDepthValue = input.lightViewPosition.z / input.lightViewPosition.w;

		lightDepthValue = lightDepthValue - bias;

		/////////////////////////////////////////
		// BEGIN PCF
		//-------------------------
		// Based on page 678 - 680 in 3D Game Programming With Direct X 11
		//

		float sum = 0;
		float shadowCoeff = 0;

		// Sample shadow map to get the nearest depth to light.
		float ss0 = depthMapTexture.Sample(SampleTypeLinearClamp, projectTexCoord.xy).r; // center
		float ss1 = depthMapTexture.Sample(SampleTypeLinearClamp, projectTexCoord.xy + float2(-SMAP_DX, 0)).r; // left
		float ss2 = depthMapTexture.Sample(SampleTypeLinearClamp, projectTexCoord.xy + float2(-SMAP_DX, -SMAP_DX)).r; // left-up
		float ss3 = depthMapTexture.Sample(SampleTypeLinearClamp, projectTexCoord.xy + float2(0, -SMAP_DX)).r; // up
		float ss4 = depthMapTexture.Sample(SampleTypeLinearClamp, projectTexCoord.xy + float2(SMAP_DX, -SMAP_DX)).r; // up-right
		float ss5 = depthMapTexture.Sample(SampleTypeLinearClamp, projectTexCoord.xy + float2(SMAP_DX, 0)).r; // right
		float ss6 = depthMapTexture.Sample(SampleTypeLinearClamp, projectTexCoord.xy + float2(SMAP_DX, SMAP_DX)).r; // down-right
		float ss7 = depthMapTexture.Sample(SampleTypeLinearClamp, projectTexCoord.xy + float2(0, SMAP_DX)).r; // down
		float ss8 = depthMapTexture.Sample(SampleTypeLinearClamp, projectTexCoord.xy + float2(-SMAP_DX, SMAP_DX)).r; // down-left

		// Check what samples are in shadow.
		float result0 = lightDepthValue <= ss0;
		float result1 = lightDepthValue <= ss1;
		float result2 = lightDepthValue <= ss2;
		float result3 = lightDepthValue <= ss3;
		float result4 = lightDepthValue <= ss4;
		float result5 = lightDepthValue <= ss5;
		float result6 = lightDepthValue <= ss6;
		float result7 = lightDepthValue <= ss7;
		float result8 = lightDepthValue <= ss8;

		// Summarize all the sample results.
		sum = result0 + result1 + result2 + result3 + result4 + result5 + result6 + result7 + result8;

		// Divide the sum by the amount of samples to get the final effect.
		shadowCoeff = sum / 9;

		// END PCF
		/////////////////////////////////////////

		if(shadowCoeff > 0)
		{
			bumpMap = shaderTexture[1].Sample(SampleTypeWrap, input.tex);
			bumpMap = (bumpMap * 2.0f) - 1.0f;

			bumpNormal = input.normal + bumpMap.x * input.tangent + bumpMap.y * input.binormal;

			bumpNormal = normalize(bumpNormal);
			lightIntensity = saturate(dot(bumpNormal, normalize(input.lightPos - input.wPos)) * shadowCoeff);

			if(lightIntensity > 0.0f)
			{
				color += (diffuseColor * lightIntensity);
				color = saturate(color);
			}
		}
	}

	//the light intensity value is calculated as the dot product between the normal vector of triangle and the light direction vector.
	//calculate the amount of light on this pixel

	textureColor = shaderTexture[0].Sample(SampleTypeWrap, input.tex);

	color = color * textureColor;
	return color;
}
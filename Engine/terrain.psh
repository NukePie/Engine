//GLOBALS
Texture2D shaderTexture1 : register(t0);
Texture2D shaderTexture2 : register(t1);
Texture2D alphaMap : register(t2);
TextureCube cubemap : register(t3);
SamplerState SampleType;

cbuffer LightBuffer
{
	float4 ambientColor;
	float4 diffuseColor;
	float3 lightDirection;
	//float padding;
};

cbuffer TextureInfoBuffer
{
	float3 camPosition;
	bool useAlpha;
};

//TYPEDEFS
struct PixelInputType
{
	float4 position : SV_POSITION;
	float4 pixelPosition : COLOR0;
	float2 tex : TEXCOORD0;
	float3 normal : NORMAL0;
	float4 color : COLOR1;
	float3 camPos : NORMAL1;
	float3 viewDir : TEXCOORD1;
	matrix viewMatrix : MATRIX0;
	float3 norm : POSITION0;
	float fogFactor : FOG;
};

SamplerState samTriLinearSam
{
	Filter = MIN_MAG_MIP_LINEAR;
	AddressU = Wrap;
	AddressV = Wrap;
};

SamplerState samAnisotropic
{
	Filter = ANISOTROPIC;
	MaxAnisotropy = 4;

	AddressU = WRAP;
	AddressV = WRAP;
};


//PIXEL SHADER
float4 LightPixelShader(PixelInputType input): SV_TARGET
{
	float4 color;
	float3 lightDir;
	float lightIntensity;
	float4 textureColor1;
	float4 textureColor2;
	float4 alphaValue;
	float4 blendColor;
	float4 reflectivityColor;
	float4 fogColor;

	alphaValue = input.color.x;

	//set the default output color to the ambient light value for all pixels
	color = ambientColor;

	//invert the light direction for calculations
	lightDir = -lightDirection;
	
	lightIntensity = saturate(dot(input.normal, lightDir));
	
	if(lightIntensity > 0.0f)
	{
		//determine the final diffuse color based on the diffuse color and the amount of light intensity
		color += (diffuseColor * lightIntensity);
	}

	//saturate the final light color
	color = saturate(color);

	if(useAlpha)
	{
		//sample the pixel color from the first texture using the sampler at this texture coordinate loaction
		textureColor1 = shaderTexture1.Sample(SampleType, input.tex);

		//sample the second texture
		textureColor2 = shaderTexture2.Sample(SampleType, input.tex);



		//alpha blend the two colors together based on the alpha value
		blendColor = (alphaValue * textureColor2) + ((1.0 - alphaValue) * textureColor1);
	}
	else
	{
		//use the pixel color from the first texture only
		blendColor = shaderTexture1.Sample(SampleType, input.tex);
	}

	//multiply the light color with the blended texture color
	color = color * blendColor;

	float3 toEye = camPosition - input.pixelPosition;

	toEye = normalize(toEye);

	float3 incident = -toEye;
	float3 reflectionVector = reflect(incident, input.norm);
	float4 reflectionColor  = cubemap.Sample(samAnisotropic, reflectionVector);

	color = color + (reflectionColor * 0.2f);
	
	// Set the color of the fog to grey.
	fogColor = float4(0.5f, 0.5f, 0.5f, 1.0f);

	// Calculate the final color using the fog effect equation.
	color = input.fogFactor * color + (1.0 - input.fogFactor) * fogColor;

	return color;
}
